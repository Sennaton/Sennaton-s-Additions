Index: ../../../../Storage/IdeaProjects/Sennaton_Additions/src/main/java/org/sennaton/sennaton_additions/SennatonMob/NynaEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\npackage org.sennaton.sennaton_additions.SennatonMob;\n\nimport com.google.errorprone.annotations.Var;\nimport net.minecraft.Util;\nimport net.minecraft.core.RegistryAccess;\nimport net.minecraft.tags.DamageTypeTags;\nimport net.minecraft.tags.EntityTypeTags;\nimport net.minecraft.util.RandomSource;\nimport net.minecraft.world.DifficultyInstance;\nimport net.minecraft.world.effect.MobEffectInstance;\nimport net.minecraft.world.effect.MobEffects;\nimport net.minecraft.world.entity.*;\nimport net.minecraft.world.entity.animal.*;\nimport net.minecraft.world.entity.projectile.ThrownPotion;\nimport net.minecraft.world.level.LevelAccessor;\nimport net.minecraft.world.level.ServerLevelAccessor;\nimport net.minecraft.world.level.block.Blocks;\nimport org.sennaton.sennaton_additions.SennatonMob.Dice.*;\nimport org.sennaton.sennaton_additions.SennatonMob.Spawns.NynaSpawnConditions;\nimport org.sennaton.sennaton_additions.Sennaton_Additions;\nimport software.bernie.geckolib.util.GeckoLibUtil;\nimport software.bernie.geckolib.core.object.PlayState;\nimport software.bernie.geckolib.core.animation.RawAnimation;\nimport software.bernie.geckolib.core.animation.AnimationState;\nimport software.bernie.geckolib.core.animation.AnimationController;\nimport software.bernie.geckolib.core.animation.AnimatableManager;\nimport software.bernie.geckolib.core.animatable.instance.AnimatableInstanceCache;\nimport software.bernie.geckolib.animatable.GeoEntity;\n\nimport net.minecraftforge.registries.ForgeRegistries;\nimport net.minecraftforge.network.PlayMessages;\nimport net.minecraftforge.network.NetworkHooks;\n\nimport net.minecraft.world.level.Level;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.entity.monster.RangedAttackMob;\nimport net.minecraft.world.entity.monster.Monster;\nimport net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;\nimport net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;\nimport net.minecraft.world.entity.ai.goal.RandomStrollGoal;\nimport net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;\nimport net.minecraft.world.entity.ai.goal.OpenDoorGoal;\nimport net.minecraft.world.entity.ai.goal.MoveBackToVillageGoal;\nimport net.minecraft.world.entity.ai.goal.MeleeAttackGoal;\nimport net.minecraft.world.entity.ai.goal.Goal;\nimport net.minecraft.world.entity.ai.goal.FloatGoal;\nimport net.minecraft.world.entity.ai.attributes.Attributes;\nimport net.minecraft.world.entity.ai.attributes.AttributeSupplier;\nimport net.minecraft.world.damagesource.DamageTypes;\nimport net.minecraft.world.damagesource.DamageSource;\nimport net.minecraft.util.Mth;\nimport net.minecraft.sounds.SoundEvent;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.network.syncher.SynchedEntityData;\nimport net.minecraft.network.syncher.EntityDataSerializers;\nimport net.minecraft.network.syncher.EntityDataAccessor;\nimport net.minecraft.network.protocol.game.ClientGamePacketListener;\nimport net.minecraft.network.protocol.Packet;\nimport net.minecraft.nbt.CompoundTag;\nimport net.minecraft.world.level.LevelAccessor;\nimport net.minecraft.core.BlockPos;\n\nimport java.util.Random;\n\n\nimport javax.annotation.Nullable;\n\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoField;\nimport java.util.EnumSet;\n\n\n\npublic class NynaEntity extends PathfinderMob implements RangedAttackMob, GeoEntity {\n\tpublic static final EntityDataAccessor<Boolean> SHOOT = SynchedEntityData.defineId(NynaEntity.class, EntityDataSerializers.BOOLEAN);\n\tpublic static final EntityDataAccessor<String> ANIMATION = SynchedEntityData.defineId(NynaEntity.class, EntityDataSerializers.STRING);\n\tpublic static final EntityDataAccessor<String> TEXTURE = SynchedEntityData.defineId(NynaEntity.class, EntityDataSerializers.STRING);\n\tprivate final AnimatableInstanceCache cache = GeckoLibUtil.createInstanceCache(this);\n\tprivate boolean swinging;\n\tprivate boolean lastloop;\n\tprivate long lastSwing;\n\tpublic String animationprocedure = \"empty\";\n\tpublic String nynatype = \"nyna\";\n\tprivate static final EntityDataAccessor<Integer> DATA_ID_TYPE_VARIANT =\n\t\t\tSynchedEntityData.defineId(NynaEntity.class, EntityDataSerializers.INT);\n\n\n\n\n\n\tpublic NynaEntity(PlayMessages.SpawnEntity packet, Level world) {\n\t\tthis(MobInit.NYNA.get(), world);\n\t}\n\n\tpublic NynaVariant variant;\n\n\tpublic SpawnGroupData finalizeSpawn(ServerLevelAccessor p_34297_, DifficultyInstance p_34298_, MobSpawnType p_34299_, @Nullable SpawnGroupData p_34300_, @Nullable CompoundTag p_34301_) {\n\t\tRandomSource randomsource = p_34297_.getRandom();\n\t\tfloat f = p_34298_.getSpecialMultiplier();\n\t\tthis.setCanPickUpLoot(randomsource.nextFloat() < 0.55F * f);\n\t\tvariant = Util.getRandom(NynaVariant.values(), this.random);\n\t\tBoolean isCold = NynaSpawnConditions.isCold( p_34297_,this.getX(),  this.getY(),  this.getZ());\n\t\tBoolean isDark = NynaSpawnConditions.isDark( p_34297_,this.getX(),  this.getY(),  this.getZ());\n\t\tBoolean isNether = NynaSpawnConditions.isNether( p_34297_,this.getX(),  this.getY(),  this.getZ());\n\t\tBoolean isHaunting = NynaSpawnConditions.isHaunting( p_34297_,this.getX(),  this.getY(),  this.getZ());\n\t\tsetVariant(variant);\n\n\n\n\t\tthis.populateDefaultEquipmentSlots(randomsource, p_34298_);\n\t\t\tthis.populateDefaultEquipmentEnchantments(randomsource, p_34298_);\n\n\n\t\tif (this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {\n\t\t\tLocalDate localdate = LocalDate.now();\n\t\t\tint i = localdate.get(ChronoField.DAY_OF_MONTH);\n\t\t\tint j = localdate.get(ChronoField.MONTH_OF_YEAR);\n\t\t\tif (j == 10 && i == 31 && randomsource.nextFloat() < 0.25F) {\n\t\t\t\tthis.setItemSlot(EquipmentSlot.HEAD, new ItemStack(randomsource.nextFloat() < 0.1F ? Blocks.JACK_O_LANTERN : Blocks.CARVED_PUMPKIN));\n\t\t\t\tthis.armorDropChances[EquipmentSlot.HEAD.getIndex()] = 0.0F;\n\t\t\t}\n\t\t}\n\n\t\treturn (SpawnGroupData)p_34300_;\n\t}\n\n\n\n\tpublic NynaEntity(EntityType<NynaEntity> type, Level world) {\n\t\tsuper(type, world);\n\t\txpReward = 0;\n\t\tsetNoAi(false);\n\t\tsetMaxUpStep(0.6f);\n\t}\n\n\t@Override\n\tprotected void defineSynchedData() {\n\t\tsuper.defineSynchedData();\n\t\tthis.entityData.define(SHOOT, false);\n\t\tthis.entityData.define(ANIMATION, \"undefined\");\n\t\tthis.entityData.define(TEXTURE, \"nyna\");\n\t\tthis.entityData.define(DATA_ID_TYPE_VARIANT, 0);\n\t}\n\n\tpublic boolean isInvulnerableTo(DamageSource pSource) {\n\t\treturn this.isRemoved() || this.isInvulnerable() && !pSource.is(DamageTypeTags.BYPASSES_INVULNERABILITY) && !pSource.isCreativePlayer() || (pSource.is(DamageTypeTags.IS_FIRE) && this.fireytype()) || pSource.is(DamageTypeTags.IS_FALL) && this.getType().is(EntityTypeTags.FALL_DAMAGE_IMMUNE);\n\t}\n\n\tprivate boolean fireytype() {\n\t\tif (this.fireImmune()||variant == NynaVariant.FIREY_NYNA || variant == NynaVariant.HAUNTED_NYNA){\n\t\t\treturn true;\n\t\t} else\n\t\t\treturn  false;\n\t}\n\n\n\n\tpublic void setTexture(String texture) {\n\t\tthis.entityData.set(TEXTURE, texture);\n\t}\n\n\tpublic String getTexture() {\n\t\treturn this.entityData.get(TEXTURE);\n\t}\n\n\t@Override\n\tpublic Packet<ClientGamePacketListener> getAddEntityPacket() {\n\t\treturn NetworkHooks.getEntitySpawningPacket(this);\n\t}\n\n\t@Override\n\tprotected void registerGoals() {\n\n\t\tsuper.registerGoals();\n\t\tthis.goalSelector.addGoal(2, new MeleeAttackGoal(this, 1.3, true) {\n\t\t\t@Override\n\t\t\tprotected double getAttackReachSqr(LivingEntity entity) {\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t});\n\t\tthis.goalSelector.addGoal(1, new RangedAttackGoal(this, 1.25, 20, 6f) {\n\t\t\t@Override\n\t\t\tpublic boolean canContinueToUse() {\n\t\t\t\treturn this.canUse();\n\n\t\t\t}\n\n\t\t});\n\t\tthis.targetSelector.addGoal(3, new HurtByTargetGoal(this).setAlertOthers());\n\t\tthis.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Monster.class, true));\n\t\tthis.targetSelector.addGoal(4,\tnew NearestAttackableTargetGoal(this, TropicalFish.class, true, false));\n\t\tthis.targetSelector.addGoal(4, new NearestAttackableTargetGoal(this, Cod.class, true, false));\n\t\tthis.targetSelector.addGoal(6, new NearestAttackableTargetGoal(this, Salmon.class, true, false));\n\t\tthis.goalSelector.addGoal(7, new OpenDoorGoal(this, true));\n\t\tthis.goalSelector.addGoal(8, new MoveBackToVillageGoal(this, 0.6, false));\n\t\tthis.goalSelector.addGoal(9, new RandomStrollGoal(this, 1));\n\t\tthis.goalSelector.addGoal(10, new RandomLookAroundGoal(this));\n\t\tthis.goalSelector.addGoal(11, new FloatGoal(this));\n\t\t;\n\t}\n\n\n\n\tpublic class RangedAttackGoal extends Goal {\n\t\tprivate final Mob mob;\n\t\tprivate final RangedAttackMob rangedAttackMob;\n\t\t@Nullable\n\t\tprivate LivingEntity target;\n\t\tprivate int attackTime = -1;\n\t\tprivate final double speedModifier;\n\t\tprivate int seeTime;\n\t\tprivate final int attackIntervalMin;\n\t\tprivate final int attackIntervalMax;\n\t\tprivate final float attackRadius;\n\t\tprivate final float attackRadiusSqr;\n\n\t\tpublic RangedAttackGoal(RangedAttackMob p_25768_, double p_25769_, int p_25770_, float p_25771_) {\n\t\t\tthis(p_25768_, p_25769_, p_25770_, p_25770_, p_25771_);\n\t\t}\n\n\t\tpublic RangedAttackGoal(RangedAttackMob p_25773_, double p_25774_, int p_25775_, int p_25776_, float p_25777_) {\n\t\t\tif (!(p_25773_ instanceof LivingEntity)) {\n\t\t\t\tthrow new IllegalArgumentException(\"ArrowAttackGoal requires Mob implements RangedAttackMob\");\n\t\t\t} else {\n\t\t\t\tthis.rangedAttackMob = p_25773_;\n\t\t\t\tthis.mob = (Mob) p_25773_;\n\t\t\t\tthis.speedModifier = p_25774_;\n\t\t\t\tthis.attackIntervalMin = p_25775_;\n\t\t\t\tthis.attackIntervalMax = p_25776_;\n\t\t\t\tthis.attackRadius = p_25777_;\n\t\t\t\tthis.attackRadiusSqr = p_25777_ * p_25777_;\n\t\t\t\tthis.setFlags(EnumSet.of(Flag.MOVE, Flag.LOOK));\n\t\t\t}\n\t\t}\n\n\t\tpublic boolean canUse() {\n\t\t\tLivingEntity livingentity = this.mob.getTarget();\n\t\t\tif (livingentity != null && livingentity.isAlive() && (livingentity.distanceTo(this.mob)> 3)) {\n\t\t\t\tthis.target = livingentity;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tpublic boolean canContinueToUse() {\n\t\t\treturn this.canUse() || this.target.isAlive() && !this.mob.getNavigation().isDone();\n\t\t}\n\n\t\tpublic void stop() {\n\t\t\tthis.target = null;\n\t\t\tthis.seeTime = 0;\n\t\t\tthis.attackTime = -1;\n\t\t\t((NynaEntity) rangedAttackMob).entityData.set(SHOOT, false);\n\t\t}\n\n\t\tpublic boolean requiresUpdateEveryTick() {\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic void tick() {\n\t\t\tdouble d0 = this.mob.distanceToSqr(this.target.getX(), this.target.getY(), this.target.getZ());\n\t\t\tboolean flag = this.mob.getSensing().hasLineOfSight(this.target);\n\t\t\tif (flag) {\n\t\t\t\t++this.seeTime;\n\t\t\t} else {\n\t\t\t\tthis.seeTime = 0;\n\t\t\t}\n\t\t\tif (!(d0 > (double) this.attackRadiusSqr) && this.seeTime >= 5) {\n\t\t\t\tthis.mob.getNavigation().stop();\n\t\t\t} else {\n\t\t\t\tthis.mob.getNavigation().moveTo(this.target, this.speedModifier);\n\t\t\t}\n\t\t\tthis.mob.getLookControl().setLookAt(this.target, 30.0F, 30.0F);\n\t\t\tif (--this.attackTime == 0) {\n\t\t\t\tif (!flag) {\n\t\t\t\t\t((NynaEntity) rangedAttackMob).entityData.set(SHOOT, false);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t((NynaEntity) rangedAttackMob).entityData.set(SHOOT, true);\n\t\t\t\tfloat f = (float) Math.sqrt(d0) / this.attackRadius;\n\t\t\t\tfloat f1 = Mth.clamp(f, 0.1F, 1.0F);\n\t\t\t\tthis.rangedAttackMob.performRangedAttack(this.target, f1);\n\t\t\t\tthis.attackTime = Mth.floor(f * (float) (this.attackIntervalMax - this.attackIntervalMin) + (float) this.attackIntervalMin);\n\t\t\t} else if (this.attackTime < 0) {\n\t\t\t\tthis.attackTime = Mth.floor(Mth.lerp(Math.sqrt(d0) / (double) this.attackRadius, (double) this.attackIntervalMin, (double) this.attackIntervalMax));\n\t\t\t} else\n\t\t\t\t((NynaEntity) rangedAttackMob).entityData.set(SHOOT, false);\n\t\t}\n\t}\n\n\t@Override\n\tpublic MobType getMobType() {\n\t\treturn MobType.UNDEFINED;\n\t}\n\n\t@Override\n\tpublic SoundEvent getHurtSound(DamageSource ds) {\n\t\treturn ForgeRegistries.SOUND_EVENTS.getValue(new ResourceLocation(\"entity.nyna.hurt\"));\n\t}\n\n\t@Override\n\tpublic SoundEvent getDeathSound() {\n\t\treturn ForgeRegistries.SOUND_EVENTS.getValue(new ResourceLocation(\"entity.nyna.death\"));\n\t}\n\n\t@Override\n\tpublic boolean hurt(DamageSource source, float amount) {\n\t\tif (source.is(DamageTypes.FALL))\n\t\t\treturn false;\n\t\treturn super.hurt(source, amount);\n\t}\n\n\t@Override\n\tpublic void addAdditionalSaveData(CompoundTag tag) {\n\t\tsuper.addAdditionalSaveData(tag);\n\t\ttag.putString(\"variant\", this.getVariant().toString());\n\n\t\t//this.entityData.set(DATA_ID_TYPE_VARIANT, tag.getInt(\"Variant\"));\n\t}\n\n\tpublic boolean doHurtTarget(Entity pEntity) {\n\t\tfloat f = this.level().getCurrentDifficultyAt(this.blockPosition()).getEffectiveDifficulty();\n\t\tboolean flag = super.doHurtTarget(pEntity);\n\t\tswitch(variant){\n\t\t\tcase NYNA->\n\t\t\t\t\tgetTarget();\n\t\t\tcase UN_NYNA->\n\t\t\t\t\t((LivingEntity)pEntity).addEffect(new MobEffectInstance(MobEffects.LEVITATION, 140 * (int)f), this);\n\t\t\tcase FRIGID_NYNA->\n\t\t\t\t((LivingEntity)pEntity).addEffect(new MobEffectInstance(MobEffects.MOVEMENT_SLOWDOWN, 140 * (int)f), this);\n\t\t\tcase FIREY_NYNA->\n\t\t\t\t\tpEntity.setSecondsOnFire(2 * (int)f);\n\t\t\tcase HAUNTED_NYNA->\n\t\t\t\t\t((LivingEntity)pEntity).addEffect(new MobEffectInstance(MobEffects.WITHER, 140 * (int)f), this);\n\t\t\tdefault->\n\t\t\t\t\tgetTarget();\n\t\t}\n\n\n\n\n\t\treturn flag;\n\t}\n\n\n\n\t@Override\n\tpublic void readAdditionalSaveData(CompoundTag tag) {\n\t\tsuper.readAdditionalSaveData(tag);\n\t\tvariant = NynaVariant.get(tag.getString(\"variant\"));\n\t\tif (variant != null) {\n\t\t\tthis.setVariant(variant);\n\t\t}\n\t\t//this.entityData.set(DATA_ID_TYPE_VARIANT, tag.getInt(\"Variant\"));\n\t}\n\n\t@Override\n\tpublic void baseTick() {\n\t\tsuper.baseTick();\n\t\tthis.refreshDimensions();\n\t}\n\n\t@Override\n\tpublic EntityDimensions getDimensions(Pose p_33597_) {\n\t\treturn super.getDimensions(p_33597_).scale((float) 1);\n\t}\n\n\t@Override\n\tpublic void performRangedAttack(LivingEntity target, float flval) {\n\n\t\tswitch(variant){\n\t\t\tcase NYNA->\n\t\t\t\tDiceEntity.shoot(this, target, variant.toString());\n\t\t\tcase UN_NYNA->\n\t\t\t\tWarpedDiceEntity.shoot(this, target, variant.toString());\n\t\t\tcase FRIGID_NYNA->\n\t\t\t\tFrozenDiceEntity.shoot(this, target, variant.toString());\n\t\t\tcase FIREY_NYNA->\n\t\t\t\tBurningDiceEntity.shoot(this, target, variant.toString());\n\t\t\tcase HAUNTED_NYNA->\n\t\t\t\tHauntedDiceEntity.shoot(this, target, variant.toString());\n\t\t\tdefault->\n\t\t\t\tDiceEntity.shoot(this, target, variant.toString());\n\t\t}\n\n\t}\n\n\t@Override\n\tpublic void aiStep() {\n\t\tsuper.aiStep();\n\t\tthis.updateSwingTime();\n\t}\n\n\n\tpublic static AttributeSupplier.Builder createAttributes() {\n\t\tAttributeSupplier.Builder builder = Mob.createMobAttributes();\n\t\tbuilder = builder.add(Attributes.MOVEMENT_SPEED, 0.3);\n\t\tbuilder = builder.add(Attributes.MAX_HEALTH, 20);\n\t\tbuilder = builder.add(Attributes.ARMOR, 0);\n\t\tbuilder = builder.add(Attributes.ATTACK_DAMAGE, 3);\n\t\tbuilder = builder.add(Attributes.FOLLOW_RANGE, 40);\n\t\tbuilder = builder.add(Attributes.ATTACK_KNOCKBACK, 1);\n\t\treturn builder;\n\t}\n\n\tprivate PlayState movementPredicate(AnimationState event) {\n\t\tif (this.animationprocedure.equals(\"empty\")) {\n\t\t\tif ((event.isMoving() || !(event.getLimbSwingAmount() > -0.15F && event.getLimbSwingAmount() < 0.15F))\n\n\t\t\t) {\n\t\t\t\treturn event.setAndContinue(RawAnimation.begin().thenLoop(\"animation.nyna.walk\"));\n\t\t\t}\n\t\t\treturn event.setAndContinue(RawAnimation.begin().thenLoop(\"animation.nyna.idle\"));\n\t\t}\n\t\treturn PlayState.STOP;\n\t}\n\n\tprivate PlayState procedurePredicate(AnimationState event) {\n\t\tif (!animationprocedure.equals(\"empty\") && event.getController().getAnimationState() == AnimationController.State.STOPPED) {\n\t\t\tevent.getController().setAnimation(RawAnimation.begin().thenPlay(this.animationprocedure));\n\t\t\tif (event.getController().getAnimationState() == AnimationController.State.STOPPED) {\n\t\t\t\tthis.animationprocedure = \"empty\";\n\t\t\t\tevent.getController().forceAnimationReset();\n\t\t\t}\n\t\t} else if (animationprocedure.equals(\"empty\")) {\n\t\t\treturn PlayState.STOP;\n\t\t}\n\t\treturn PlayState.CONTINUE;\n\t}\n\n\t@Override\n\tprotected void tickDeath() {\n\t\t++this.deathTime;\n\t\tif (this.deathTime == 20) {\n\t\t\tthis.remove(RemovalReason.KILLED);\n\t\t\tthis.dropExperience();\n\t\t}\n\t}\n\n\tpublic String getSyncedAnimation() {\n\t\treturn this.entityData.get(ANIMATION);\n\t}\n\n\tpublic void setAnimation(String animation) {\n\t\tthis.entityData.set(ANIMATION, animation);\n\t}\n\n\t@Override\n\tpublic void registerControllers(AnimatableManager.ControllerRegistrar data) {\n\t\tdata.add(new AnimationController<>(this, \"movement\", 4, this::movementPredicate));\n\t\tdata.add(new AnimationController<>(this, \"procedure\", 4, this::procedurePredicate));\n\t}\n\n\t@Override\n\tpublic AnimatableInstanceCache getAnimatableInstanceCache() {\n\t\treturn this.cache;\n\t}\n\n\n\t/* VARIANTS */\n\n\n\tpublic NynaVariant getVariant() {\n\t\treturn NynaVariant.byId(this.getTypeVariant() & 255);\n\t}\n\n\tprivate int getTypeVariant() {\n\t\treturn this.entityData.get(DATA_ID_TYPE_VARIANT);\n\t}\n\n\tprivate void setVariant(NynaVariant variant) {\n\t\tthis.entityData.set(DATA_ID_TYPE_VARIANT, variant.getId() & 255);\n\t}\n\n\tpublic static void setVariant(NynaEntity Nyna, NynaVariant Variant) {\n\t\tNyna.entityData.set(DATA_ID_TYPE_VARIANT, Variant.getId() & 255);\n\t\tNyna.variant = Variant;\n\t}\n}\n
===================================================================
diff --git a/../../../../Storage/IdeaProjects/Sennaton_Additions/src/main/java/org/sennaton/sennaton_additions/SennatonMob/NynaEntity.java b/../../../../Storage/IdeaProjects/Sennaton_Additions/src/main/java/org/sennaton/sennaton_additions/SennatonMob/NynaEntity.java
--- a/../../../../Storage/IdeaProjects/Sennaton_Additions/src/main/java/org/sennaton/sennaton_additions/SennatonMob/NynaEntity.java	(revision 350f1eaaa161a43534772e2a3111472a243c9811)
+++ b/../../../../Storage/IdeaProjects/Sennaton_Additions/src/main/java/org/sennaton/sennaton_additions/SennatonMob/NynaEntity.java	(date 1718972988871)
@@ -148,7 +148,7 @@
 	}
 
 	private boolean fireytype() {
-		if (this.fireImmune()||variant == NynaVariant.FIREY_NYNA || variant == NynaVariant.HAUNTED_NYNA){
+		if (this.fireImmune() || variant == NynaVariant.FIREY_NYNA || variant == NynaVariant.HAUNTED_NYNA){
 			return true;
 		} else
 			return  false;
@@ -187,7 +187,7 @@
 			}
 
 		});
-		this.targetSelector.addGoal(3, new HurtByTargetGoal(this).setAlertOthers());
+		this.targetSelector.addGoal(3, new HurtByTargetGoal(this, NynaEntity.class).setAlertOthers());
 		this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Monster.class, true));
 		this.targetSelector.addGoal(4,	new NearestAttackableTargetGoal(this, TropicalFish.class, true, false));
 		this.targetSelector.addGoal(4, new NearestAttackableTargetGoal(this, Cod.class, true, false));
Index: ../../../../Storage/IdeaProjects/Sennaton_Additions/src/main/java/org/sennaton/sennaton_additions/SennatonMob/Spawns/NynaSpawnCondition.java
===================================================================
diff --git a/../../../../Storage/IdeaProjects/Sennaton_Additions/src/main/java/org/sennaton/sennaton_additions/SennatonMob/Spawns/NynaSpawnCondition.java b/../../../../Storage/IdeaProjects/Sennaton_Additions/src/main/java/org/sennaton/sennaton_additions/SennatonMob/Spawns/NynaSpawnCondition.java
deleted file mode 100644
--- a/../../../../Storage/IdeaProjects/Sennaton_Additions/src/main/java/org/sennaton/sennaton_additions/SennatonMob/Spawns/NynaSpawnCondition.java	(revision 350f1eaaa161a43534772e2a3111472a243c9811)
+++ /dev/null	(revision 350f1eaaa161a43534772e2a3111472a243c9811)
@@ -1,14 +0,0 @@
-package org.sennaton.sennaton_additions.SennatonMob.Spawns;
-
-import net.minecraft.world.level.LevelAccessor;
-import net.minecraft.core.BlockPos;
-
-public class NynaSpawnCondition {
-	public static boolean execute(LevelAccessor world, double x, double y, double z) {
-		if (world.getBiome(BlockPos.containing(x, y, z)).value().getBaseTemperature() < 0.05) {
-			return false;
-		}
-		return world.getMaxLocalRawBrightness(BlockPos.containing(x, y, z)) < 1;
-	}
-}
-
Index: src/main/java/org/sennaton/sennaton_additions/SennatonMob/Spawns/NynaSpawnCondition.java
===================================================================
diff --git a/src/main/java/org/sennaton/sennaton_additions/SennatonMob/Spawns/NynaSpawnCondition.java b/src/main/java/org/sennaton/sennaton_additions/SennatonMob/Spawns/NynaSpawnCondition.java
deleted file mode 100644
--- a/src/main/java/org/sennaton/sennaton_additions/SennatonMob/Spawns/NynaSpawnCondition.java	(revision 350f1eaaa161a43534772e2a3111472a243c9811)
+++ /dev/null	(revision 350f1eaaa161a43534772e2a3111472a243c9811)
@@ -1,14 +0,0 @@
-package org.sennaton.sennaton_additions.SennatonMob.Spawns;
-
-import net.minecraft.world.level.LevelAccessor;
-import net.minecraft.core.BlockPos;
-
-public class NynaSpawnCondition {
-	public static boolean execute(LevelAccessor world, double x, double y, double z) {
-		if (world.getBiome(BlockPos.containing(x, y, z)).value().getBaseTemperature() < 0.05) {
-			return false;
-		}
-		return world.getMaxLocalRawBrightness(BlockPos.containing(x, y, z)) < 1;
-	}
-}
-
Index: ../../../../Storage/IdeaProjects/Sennaton_Additions/src/main/java/org/sennaton/sennaton_additions/Sennaton_Additions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.sennaton.sennaton_additions;\n\nimport com.mojang.logging.LogUtils;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.renderer.entity.EntityRenderers;\nimport net.minecraft.core.registries.Registries;\nimport net.minecraft.world.entity.Mob;\nimport net.minecraft.world.entity.SpawnPlacements;\nimport net.minecraft.world.entity.animal.Animal;\nimport net.minecraft.world.item.CreativeModeTab;\nimport net.minecraft.world.item.CreativeModeTabs;\nimport net.minecraft.world.item.Item;\nimport net.minecraft.world.level.block.Block;\nimport net.minecraft.world.level.block.Blocks;\nimport net.minecraft.world.level.levelgen.Heightmap;\nimport net.minecraftforge.api.distmarker.Dist;\nimport net.minecraftforge.common.MinecraftForge;\nimport net.minecraftforge.event.BuildCreativeModeTabContentsEvent;\nimport net.minecraftforge.event.server.ServerStartingEvent;\nimport net.minecraftforge.eventbus.api.IEventBus;\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\nimport net.minecraftforge.fml.ModLoadingContext;\nimport net.minecraftforge.fml.common.Mod;\nimport net.minecraftforge.fml.config.ModConfig;\nimport net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;\nimport net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;\nimport net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\nimport net.minecraftforge.registries.DeferredRegister;\nimport net.minecraftforge.registries.ForgeRegistries;\nimport org.sennaton.sennaton_additions.SennatonBlocks.SennatonBlocks;\nimport org.sennaton.sennaton_additions.SennatonItems.SennatonItems;\nimport org.sennaton.sennaton_additions.SennatonMob.MobInit;\nimport org.sennaton.sennaton_additions.SennatonMob.NynaEntity;\nimport org.sennaton.sennaton_additions.SennatonMob.Spawns.NynaSpawnCondition;\nimport org.sennaton.sennaton_additions.client.renderer.dice.DiceRenderer;\nimport org.sennaton.sennaton_additions.client.renderer.dice.FrozenDiceRenderer;\nimport org.sennaton.sennaton_additions.client.renderer.dice.WarpedDiceRenderer;\nimport org.sennaton.sennaton_additions.client.renderer.dice.BurningDiceRenderer;\nimport org.sennaton.sennaton_additions.client.renderer.dice.HauntedDiceRenderer;\nimport org.sennaton.sennaton_additions.client.renderer.NynaRenderer;\nimport org.slf4j.Logger;\n\n// The value here should match an entry in the META-INF/mods.toml file\n@Mod(Sennaton_Additions.MODID)\npublic class Sennaton_Additions {\n\n    // Define mod id in a common place for everything to reference\n    public static final String MODID = \"sennaton_additions\";\n    // Directly reference a slf4j logger\n    public static final Logger LOGGER = LogUtils.getLogger();\n    // Create a Deferred Register to hold Blocks which will all be registered under the \"sennaton_additions\" namespace\n    public static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MODID);\n    // Create a Deferred Register to hold Items which will all be registered under the \"sennaton_additions\" namespace\n    public static final DeferredRegister<Item> ITEMS = DeferredRegister.create(ForgeRegistries.ITEMS, MODID);\n    // Create a Deferred Register to hold CreativeModeTabs which will all be registered under the \"examplemod\" namespace\n    public static final DeferredRegister<CreativeModeTab> CREATIVE_MODE_TABS = DeferredRegister.create(Registries.CREATIVE_MODE_TAB, MODID);\n\n\n    public Sennaton_Additions() {\n        IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();\n\n        SennatonItems.register(modEventBus);\n        SennatonBlocks.register(modEventBus);\n        MobInit.REGISTRY.register(modEventBus);\n       // SpawnPlacements.register(MobInit.NYNA.get(),\n         //       SpawnPlacements.Type.ON_GROUND, Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, Animal::checkAnimalSpawnRules);\n\n\n\n        // Register the commonSetup method for modloading\n        modEventBus.addListener(this::commonSetup);\n\n        // Register the Deferred Register to the mod event bus so blocks get registered\n        BLOCKS.register(modEventBus);\n        // Register the Deferred Register to the mod event bus so items get registered\n        ITEMS.register(modEventBus);\n        // Register the Deferred Register to the mod event bus so tabs get registered\n        CREATIVE_MODE_TABS.register(modEventBus);\n\n        // Register ourselves for server and other game events we are interested in\n        MinecraftForge.EVENT_BUS.register(this);\n\n        // Register the item to a creative tab\n        modEventBus.addListener(this::addCreative);\n\n        // Register our mod's ForgeConfigSpec so that Forge can create and load the config file for us\n        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Config.SPEC);\n    }\n\n    private void commonSetup(final FMLCommonSetupEvent event) {\n        // Some common setup code\n        LOGGER.info(\"HELLO FROM COMMON SETUP\");\n        LOGGER.info(\"DIRT BLOCK >> {}\", ForgeRegistries.BLOCKS.getKey(Blocks.DIRT));\n\n        if (Config.logDirtBlock)\n            LOGGER.info(\"DIRT BLOCK >> {}\", ForgeRegistries.BLOCKS.getKey(Blocks.DIRT));\n\n        LOGGER.info(Config.magicNumberIntroduction + Config.magicNumber);\n\n        Config.items.forEach((item) -> LOGGER.info(\"ITEM >> {}\", item.toString()));\n\n        SpawnPlacements.register(MobInit.NYNA.get(), SpawnPlacements.Type.ON_GROUND, Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, (entityType, world, reason, pos, random) -> {\n            int x = pos.getX();\n            int y = pos.getY();\n            int z = pos.getZ();\n            return true;\n        });\n\n    }\n\n    // Add the example block item to the building blocks tab\n    private void addCreative(BuildCreativeModeTabContentsEvent event)\n    {\n        if (event.getTabKey() == CreativeModeTabs.COMBAT) {\n            event.accept(SennatonItems.CRYSTAL_EDGE);\n        }\n        if (event.getTabKey() == CreativeModeTabs.TOOLS_AND_UTILITIES) {\n            event.accept(SennatonItems.WRAPPED_COAL);\n        }\n        if (event.getTabKey() == CreativeModeTabs.INGREDIENTS) {\n            event.accept(SennatonItems.SHARPENED_CRYSTAL);\n            event.accept(SennatonItems.HARDENED_DIAMOND);\n        }\n    }\n    // You can use SubscribeEvent and let the Event Bus discover methods to call\n    @SubscribeEvent\n    public void onServerStarting(ServerStartingEvent event) {\n        // Do something when the server starts\n        LOGGER.info(\"HELLO from server starting\");\n    }\n\n    // You can use EventBusSubscriber to automatically register all static methods in the class annotated with @SubscribeEvent\n    @Mod.EventBusSubscriber(modid = MODID, bus = Mod.EventBusSubscriber.Bus.MOD, value = Dist.CLIENT)\n    public static class ClientModEvents {\n\n        @SubscribeEvent\n        public static void onClientSetup(FMLClientSetupEvent event)\n        {\n            EntityRenderers.register(MobInit.NYNA.get(), NynaRenderer::new);\n            EntityRenderers.register(MobInit.DICE.get(), DiceRenderer::new);\n            EntityRenderers.register(MobInit.FROZEN_DICE.get(), FrozenDiceRenderer::new);\n            EntityRenderers.register(MobInit.WARPED_DICE.get(), WarpedDiceRenderer::new);\n            EntityRenderers.register(MobInit.BURNING_DICE.get(), BurningDiceRenderer::new);\n            EntityRenderers.register(MobInit.HAUNTED_DICE.get(), HauntedDiceRenderer::new);\n\n            // Some client setup code\n            LOGGER.info(\"HELLO FROM CLIENT SETUP\");\n            LOGGER.info(\"MINECRAFT NAME >> {}\", Minecraft.getInstance().getUser().getName());\n        }\n    }\n}\n\n
===================================================================
diff --git a/../../../../Storage/IdeaProjects/Sennaton_Additions/src/main/java/org/sennaton/sennaton_additions/Sennaton_Additions.java b/../../../../Storage/IdeaProjects/Sennaton_Additions/src/main/java/org/sennaton/sennaton_additions/Sennaton_Additions.java
--- a/../../../../Storage/IdeaProjects/Sennaton_Additions/src/main/java/org/sennaton/sennaton_additions/Sennaton_Additions.java	(revision 350f1eaaa161a43534772e2a3111472a243c9811)
+++ b/../../../../Storage/IdeaProjects/Sennaton_Additions/src/main/java/org/sennaton/sennaton_additions/Sennaton_Additions.java	(date 1718971949104)
@@ -31,7 +31,7 @@
 import org.sennaton.sennaton_additions.SennatonItems.SennatonItems;
 import org.sennaton.sennaton_additions.SennatonMob.MobInit;
 import org.sennaton.sennaton_additions.SennatonMob.NynaEntity;
-import org.sennaton.sennaton_additions.SennatonMob.Spawns.NynaSpawnCondition;
+import org.sennaton.sennaton_additions.SennatonMob.Spawns.NynaSpawnConditions;
 import org.sennaton.sennaton_additions.client.renderer.dice.DiceRenderer;
 import org.sennaton.sennaton_additions.client.renderer.dice.FrozenDiceRenderer;
 import org.sennaton.sennaton_additions.client.renderer.dice.WarpedDiceRenderer;
@@ -103,7 +103,7 @@
             int x = pos.getX();
             int y = pos.getY();
             int z = pos.getZ();
-            return true;
+            return NynaSpawnConditions.ShouldSpawn(world, x, y, z);
         });
 
     }
Index: src/main/java/org/sennaton/sennaton_additions/SennatonMob/NynaEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\npackage org.sennaton.sennaton_additions.SennatonMob;\n\nimport com.google.errorprone.annotations.Var;\nimport net.minecraft.Util;\nimport net.minecraft.core.RegistryAccess;\nimport net.minecraft.tags.DamageTypeTags;\nimport net.minecraft.tags.EntityTypeTags;\nimport net.minecraft.util.RandomSource;\nimport net.minecraft.world.DifficultyInstance;\nimport net.minecraft.world.effect.MobEffectInstance;\nimport net.minecraft.world.effect.MobEffects;\nimport net.minecraft.world.entity.*;\nimport net.minecraft.world.entity.animal.*;\nimport net.minecraft.world.entity.projectile.ThrownPotion;\nimport net.minecraft.world.level.LevelAccessor;\nimport net.minecraft.world.level.ServerLevelAccessor;\nimport net.minecraft.world.level.block.Blocks;\nimport org.sennaton.sennaton_additions.SennatonMob.Dice.*;\nimport org.sennaton.sennaton_additions.SennatonMob.Spawns.NynaSpawnConditions;\nimport org.sennaton.sennaton_additions.Sennaton_Additions;\nimport software.bernie.geckolib.util.GeckoLibUtil;\nimport software.bernie.geckolib.core.object.PlayState;\nimport software.bernie.geckolib.core.animation.RawAnimation;\nimport software.bernie.geckolib.core.animation.AnimationState;\nimport software.bernie.geckolib.core.animation.AnimationController;\nimport software.bernie.geckolib.core.animation.AnimatableManager;\nimport software.bernie.geckolib.core.animatable.instance.AnimatableInstanceCache;\nimport software.bernie.geckolib.animatable.GeoEntity;\n\nimport net.minecraftforge.registries.ForgeRegistries;\nimport net.minecraftforge.network.PlayMessages;\nimport net.minecraftforge.network.NetworkHooks;\n\nimport net.minecraft.world.level.Level;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.entity.monster.RangedAttackMob;\nimport net.minecraft.world.entity.monster.Monster;\nimport net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;\nimport net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;\nimport net.minecraft.world.entity.ai.goal.RandomStrollGoal;\nimport net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;\nimport net.minecraft.world.entity.ai.goal.OpenDoorGoal;\nimport net.minecraft.world.entity.ai.goal.MoveBackToVillageGoal;\nimport net.minecraft.world.entity.ai.goal.MeleeAttackGoal;\nimport net.minecraft.world.entity.ai.goal.Goal;\nimport net.minecraft.world.entity.ai.goal.FloatGoal;\nimport net.minecraft.world.entity.ai.attributes.Attributes;\nimport net.minecraft.world.entity.ai.attributes.AttributeSupplier;\nimport net.minecraft.world.damagesource.DamageTypes;\nimport net.minecraft.world.damagesource.DamageSource;\nimport net.minecraft.util.Mth;\nimport net.minecraft.sounds.SoundEvent;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.network.syncher.SynchedEntityData;\nimport net.minecraft.network.syncher.EntityDataSerializers;\nimport net.minecraft.network.syncher.EntityDataAccessor;\nimport net.minecraft.network.protocol.game.ClientGamePacketListener;\nimport net.minecraft.network.protocol.Packet;\nimport net.minecraft.nbt.CompoundTag;\nimport net.minecraft.world.level.LevelAccessor;\nimport net.minecraft.core.BlockPos;\n\nimport java.util.Random;\n\n\nimport javax.annotation.Nullable;\n\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoField;\nimport java.util.EnumSet;\n\n\n\npublic class NynaEntity extends PathfinderMob implements RangedAttackMob, GeoEntity {\n\tpublic static final EntityDataAccessor<Boolean> SHOOT = SynchedEntityData.defineId(NynaEntity.class, EntityDataSerializers.BOOLEAN);\n\tpublic static final EntityDataAccessor<String> ANIMATION = SynchedEntityData.defineId(NynaEntity.class, EntityDataSerializers.STRING);\n\tpublic static final EntityDataAccessor<String> TEXTURE = SynchedEntityData.defineId(NynaEntity.class, EntityDataSerializers.STRING);\n\tprivate final AnimatableInstanceCache cache = GeckoLibUtil.createInstanceCache(this);\n\tprivate boolean swinging;\n\tprivate boolean lastloop;\n\tprivate long lastSwing;\n\tpublic String animationprocedure = \"empty\";\n\tpublic String nynatype = \"nyna\";\n\tprivate static final EntityDataAccessor<Integer> DATA_ID_TYPE_VARIANT =\n\t\t\tSynchedEntityData.defineId(NynaEntity.class, EntityDataSerializers.INT);\n\n\n\n\n\n\tpublic NynaEntity(PlayMessages.SpawnEntity packet, Level world) {\n\t\tthis(MobInit.NYNA.get(), world);\n\t}\n\n\tpublic NynaVariant variant;\n\n\tpublic SpawnGroupData finalizeSpawn(ServerLevelAccessor p_34297_, DifficultyInstance p_34298_, MobSpawnType p_34299_, @Nullable SpawnGroupData p_34300_, @Nullable CompoundTag p_34301_) {\n\t\tRandomSource randomsource = p_34297_.getRandom();\n\t\tfloat f = p_34298_.getSpecialMultiplier();\n\t\tthis.setCanPickUpLoot(randomsource.nextFloat() < 0.55F * f);\n\t\tvariant = Util.getRandom(NynaVariant.values(), this.random);\n\t\tBoolean isCold = NynaSpawnConditions.isCold( p_34297_,this.getX(),  this.getY(),  this.getZ());\n\t\tBoolean isDark = NynaSpawnConditions.isDark( p_34297_,this.getX(),  this.getY(),  this.getZ());\n\t\tBoolean isNether = NynaSpawnConditions.isNether( p_34297_,this.getX(),  this.getY(),  this.getZ());\n\t\tBoolean isHaunting = NynaSpawnConditions.isHaunting( p_34297_,this.getX(),  this.getY(),  this.getZ());\n\t\tsetVariant(variant);\n\n\n\n\t\tthis.populateDefaultEquipmentSlots(randomsource, p_34298_);\n\t\t\tthis.populateDefaultEquipmentEnchantments(randomsource, p_34298_);\n\n\n\t\tif (this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {\n\t\t\tLocalDate localdate = LocalDate.now();\n\t\t\tint i = localdate.get(ChronoField.DAY_OF_MONTH);\n\t\t\tint j = localdate.get(ChronoField.MONTH_OF_YEAR);\n\t\t\tif (j == 10 && i == 31 && randomsource.nextFloat() < 0.25F) {\n\t\t\t\tthis.setItemSlot(EquipmentSlot.HEAD, new ItemStack(randomsource.nextFloat() < 0.1F ? Blocks.JACK_O_LANTERN : Blocks.CARVED_PUMPKIN));\n\t\t\t\tthis.armorDropChances[EquipmentSlot.HEAD.getIndex()] = 0.0F;\n\t\t\t}\n\t\t}\n\n\t\treturn (SpawnGroupData)p_34300_;\n\t}\n\n\n\n\tpublic NynaEntity(EntityType<NynaEntity> type, Level world) {\n\t\tsuper(type, world);\n\t\txpReward = 0;\n\t\tsetNoAi(false);\n\t\tsetMaxUpStep(0.6f);\n\t}\n\n\t@Override\n\tprotected void defineSynchedData() {\n\t\tsuper.defineSynchedData();\n\t\tthis.entityData.define(SHOOT, false);\n\t\tthis.entityData.define(ANIMATION, \"undefined\");\n\t\tthis.entityData.define(TEXTURE, \"nyna\");\n\t\tthis.entityData.define(DATA_ID_TYPE_VARIANT, 0);\n\t}\n\n\tpublic boolean isInvulnerableTo(DamageSource pSource) {\n\t\treturn this.isRemoved() || this.isInvulnerable() && !pSource.is(DamageTypeTags.BYPASSES_INVULNERABILITY) && !pSource.isCreativePlayer() || (pSource.is(DamageTypeTags.IS_FIRE) && this.fireytype()) || pSource.is(DamageTypeTags.IS_FALL) && this.getType().is(EntityTypeTags.FALL_DAMAGE_IMMUNE);\n\t}\n\n\tprivate boolean fireytype() {\n\t\tif (this.fireImmune()||variant == NynaVariant.FIREY_NYNA || variant == NynaVariant.HAUNTED_NYNA){\n\t\t\treturn true;\n\t\t} else\n\t\t\treturn  false;\n\t}\n\n\n\n\tpublic void setTexture(String texture) {\n\t\tthis.entityData.set(TEXTURE, texture);\n\t}\n\n\tpublic String getTexture() {\n\t\treturn this.entityData.get(TEXTURE);\n\t}\n\n\t@Override\n\tpublic Packet<ClientGamePacketListener> getAddEntityPacket() {\n\t\treturn NetworkHooks.getEntitySpawningPacket(this);\n\t}\n\n\t@Override\n\tprotected void registerGoals() {\n\n\t\tsuper.registerGoals();\n\t\tthis.goalSelector.addGoal(2, new MeleeAttackGoal(this, 1.3, true) {\n\t\t\t@Override\n\t\t\tprotected double getAttackReachSqr(LivingEntity entity) {\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t});\n\t\tthis.goalSelector.addGoal(1, new RangedAttackGoal(this, 1.25, 20, 6f) {\n\t\t\t@Override\n\t\t\tpublic boolean canContinueToUse() {\n\t\t\t\treturn this.canUse();\n\n\t\t\t}\n\n\t\t});\n\t\tthis.targetSelector.addGoal(3, new HurtByTargetGoal(this).setAlertOthers());\n\t\tthis.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Monster.class, true));\n\t\tthis.targetSelector.addGoal(4,\tnew NearestAttackableTargetGoal(this, TropicalFish.class, true, false));\n\t\tthis.targetSelector.addGoal(4, new NearestAttackableTargetGoal(this, Cod.class, true, false));\n\t\tthis.targetSelector.addGoal(6, new NearestAttackableTargetGoal(this, Salmon.class, true, false));\n\t\tthis.goalSelector.addGoal(7, new OpenDoorGoal(this, true));\n\t\tthis.goalSelector.addGoal(8, new MoveBackToVillageGoal(this, 0.6, false));\n\t\tthis.goalSelector.addGoal(9, new RandomStrollGoal(this, 1));\n\t\tthis.goalSelector.addGoal(10, new RandomLookAroundGoal(this));\n\t\tthis.goalSelector.addGoal(11, new FloatGoal(this));\n\t\t;\n\t}\n\n\n\n\tpublic class RangedAttackGoal extends Goal {\n\t\tprivate final Mob mob;\n\t\tprivate final RangedAttackMob rangedAttackMob;\n\t\t@Nullable\n\t\tprivate LivingEntity target;\n\t\tprivate int attackTime = -1;\n\t\tprivate final double speedModifier;\n\t\tprivate int seeTime;\n\t\tprivate final int attackIntervalMin;\n\t\tprivate final int attackIntervalMax;\n\t\tprivate final float attackRadius;\n\t\tprivate final float attackRadiusSqr;\n\n\t\tpublic RangedAttackGoal(RangedAttackMob p_25768_, double p_25769_, int p_25770_, float p_25771_) {\n\t\t\tthis(p_25768_, p_25769_, p_25770_, p_25770_, p_25771_);\n\t\t}\n\n\t\tpublic RangedAttackGoal(RangedAttackMob p_25773_, double p_25774_, int p_25775_, int p_25776_, float p_25777_) {\n\t\t\tif (!(p_25773_ instanceof LivingEntity)) {\n\t\t\t\tthrow new IllegalArgumentException(\"ArrowAttackGoal requires Mob implements RangedAttackMob\");\n\t\t\t} else {\n\t\t\t\tthis.rangedAttackMob = p_25773_;\n\t\t\t\tthis.mob = (Mob) p_25773_;\n\t\t\t\tthis.speedModifier = p_25774_;\n\t\t\t\tthis.attackIntervalMin = p_25775_;\n\t\t\t\tthis.attackIntervalMax = p_25776_;\n\t\t\t\tthis.attackRadius = p_25777_;\n\t\t\t\tthis.attackRadiusSqr = p_25777_ * p_25777_;\n\t\t\t\tthis.setFlags(EnumSet.of(Flag.MOVE, Flag.LOOK));\n\t\t\t}\n\t\t}\n\n\t\tpublic boolean canUse() {\n\t\t\tLivingEntity livingentity = this.mob.getTarget();\n\t\t\tif (livingentity != null && livingentity.isAlive() && (livingentity.distanceTo(this.mob)> 3)) {\n\t\t\t\tthis.target = livingentity;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tpublic boolean canContinueToUse() {\n\t\t\treturn this.canUse() || this.target.isAlive() && !this.mob.getNavigation().isDone();\n\t\t}\n\n\t\tpublic void stop() {\n\t\t\tthis.target = null;\n\t\t\tthis.seeTime = 0;\n\t\t\tthis.attackTime = -1;\n\t\t\t((NynaEntity) rangedAttackMob).entityData.set(SHOOT, false);\n\t\t}\n\n\t\tpublic boolean requiresUpdateEveryTick() {\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic void tick() {\n\t\t\tdouble d0 = this.mob.distanceToSqr(this.target.getX(), this.target.getY(), this.target.getZ());\n\t\t\tboolean flag = this.mob.getSensing().hasLineOfSight(this.target);\n\t\t\tif (flag) {\n\t\t\t\t++this.seeTime;\n\t\t\t} else {\n\t\t\t\tthis.seeTime = 0;\n\t\t\t}\n\t\t\tif (!(d0 > (double) this.attackRadiusSqr) && this.seeTime >= 5) {\n\t\t\t\tthis.mob.getNavigation().stop();\n\t\t\t} else {\n\t\t\t\tthis.mob.getNavigation().moveTo(this.target, this.speedModifier);\n\t\t\t}\n\t\t\tthis.mob.getLookControl().setLookAt(this.target, 30.0F, 30.0F);\n\t\t\tif (--this.attackTime == 0) {\n\t\t\t\tif (!flag) {\n\t\t\t\t\t((NynaEntity) rangedAttackMob).entityData.set(SHOOT, false);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t((NynaEntity) rangedAttackMob).entityData.set(SHOOT, true);\n\t\t\t\tfloat f = (float) Math.sqrt(d0) / this.attackRadius;\n\t\t\t\tfloat f1 = Mth.clamp(f, 0.1F, 1.0F);\n\t\t\t\tthis.rangedAttackMob.performRangedAttack(this.target, f1);\n\t\t\t\tthis.attackTime = Mth.floor(f * (float) (this.attackIntervalMax - this.attackIntervalMin) + (float) this.attackIntervalMin);\n\t\t\t} else if (this.attackTime < 0) {\n\t\t\t\tthis.attackTime = Mth.floor(Mth.lerp(Math.sqrt(d0) / (double) this.attackRadius, (double) this.attackIntervalMin, (double) this.attackIntervalMax));\n\t\t\t} else\n\t\t\t\t((NynaEntity) rangedAttackMob).entityData.set(SHOOT, false);\n\t\t}\n\t}\n\n\t@Override\n\tpublic MobType getMobType() {\n\t\treturn MobType.UNDEFINED;\n\t}\n\n\t@Override\n\tpublic SoundEvent getHurtSound(DamageSource ds) {\n\t\treturn ForgeRegistries.SOUND_EVENTS.getValue(new ResourceLocation(\"entity.nyna.hurt\"));\n\t}\n\n\t@Override\n\tpublic SoundEvent getDeathSound() {\n\t\treturn ForgeRegistries.SOUND_EVENTS.getValue(new ResourceLocation(\"entity.nyna.death\"));\n\t}\n\n\t@Override\n\tpublic boolean hurt(DamageSource source, float amount) {\n\t\tif (source.is(DamageTypes.FALL))\n\t\t\treturn false;\n\t\treturn super.hurt(source, amount);\n\t}\n\n\t@Override\n\tpublic void addAdditionalSaveData(CompoundTag tag) {\n\t\tsuper.addAdditionalSaveData(tag);\n\t\ttag.putString(\"variant\", this.getVariant().toString());\n\n\t\t//this.entityData.set(DATA_ID_TYPE_VARIANT, tag.getInt(\"Variant\"));\n\t}\n\n\tpublic boolean doHurtTarget(Entity pEntity) {\n\t\tfloat f = this.level().getCurrentDifficultyAt(this.blockPosition()).getEffectiveDifficulty();\n\t\tboolean flag = super.doHurtTarget(pEntity);\n\t\tswitch(variant){\n\t\t\tcase NYNA->\n\t\t\t\t\tgetTarget();\n\t\t\tcase UN_NYNA->\n\t\t\t\t\t((LivingEntity)pEntity).addEffect(new MobEffectInstance(MobEffects.LEVITATION, 140 * (int)f), this);\n\t\t\tcase FRIGID_NYNA->\n\t\t\t\t((LivingEntity)pEntity).addEffect(new MobEffectInstance(MobEffects.MOVEMENT_SLOWDOWN, 140 * (int)f), this);\n\t\t\tcase FIREY_NYNA->\n\t\t\t\t\tpEntity.setSecondsOnFire(2 * (int)f);\n\t\t\tcase HAUNTED_NYNA->\n\t\t\t\t\t((LivingEntity)pEntity).addEffect(new MobEffectInstance(MobEffects.WITHER, 140 * (int)f), this);\n\t\t\tdefault->\n\t\t\t\t\tgetTarget();\n\t\t}\n\n\n\n\n\t\treturn flag;\n\t}\n\n\n\n\t@Override\n\tpublic void readAdditionalSaveData(CompoundTag tag) {\n\t\tsuper.readAdditionalSaveData(tag);\n\t\tvariant = NynaVariant.get(tag.getString(\"variant\"));\n\t\tif (variant != null) {\n\t\t\tthis.setVariant(variant);\n\t\t}\n\t\t//this.entityData.set(DATA_ID_TYPE_VARIANT, tag.getInt(\"Variant\"));\n\t}\n\n\t@Override\n\tpublic void baseTick() {\n\t\tsuper.baseTick();\n\t\tthis.refreshDimensions();\n\t}\n\n\t@Override\n\tpublic EntityDimensions getDimensions(Pose p_33597_) {\n\t\treturn super.getDimensions(p_33597_).scale((float) 1);\n\t}\n\n\t@Override\n\tpublic void performRangedAttack(LivingEntity target, float flval) {\n\n\t\tswitch(variant){\n\t\t\tcase NYNA->\n\t\t\t\tDiceEntity.shoot(this, target, variant.toString());\n\t\t\tcase UN_NYNA->\n\t\t\t\tWarpedDiceEntity.shoot(this, target, variant.toString());\n\t\t\tcase FRIGID_NYNA->\n\t\t\t\tFrozenDiceEntity.shoot(this, target, variant.toString());\n\t\t\tcase FIREY_NYNA->\n\t\t\t\tBurningDiceEntity.shoot(this, target, variant.toString());\n\t\t\tcase HAUNTED_NYNA->\n\t\t\t\tHauntedDiceEntity.shoot(this, target, variant.toString());\n\t\t\tdefault->\n\t\t\t\tDiceEntity.shoot(this, target, variant.toString());\n\t\t}\n\n\t}\n\n\t@Override\n\tpublic void aiStep() {\n\t\tsuper.aiStep();\n\t\tthis.updateSwingTime();\n\t}\n\n\n\tpublic static AttributeSupplier.Builder createAttributes() {\n\t\tAttributeSupplier.Builder builder = Mob.createMobAttributes();\n\t\tbuilder = builder.add(Attributes.MOVEMENT_SPEED, 0.3);\n\t\tbuilder = builder.add(Attributes.MAX_HEALTH, 20);\n\t\tbuilder = builder.add(Attributes.ARMOR, 0);\n\t\tbuilder = builder.add(Attributes.ATTACK_DAMAGE, 3);\n\t\tbuilder = builder.add(Attributes.FOLLOW_RANGE, 40);\n\t\tbuilder = builder.add(Attributes.ATTACK_KNOCKBACK, 1);\n\t\treturn builder;\n\t}\n\n\tprivate PlayState movementPredicate(AnimationState event) {\n\t\tif (this.animationprocedure.equals(\"empty\")) {\n\t\t\tif ((event.isMoving() || !(event.getLimbSwingAmount() > -0.15F && event.getLimbSwingAmount() < 0.15F))\n\n\t\t\t) {\n\t\t\t\treturn event.setAndContinue(RawAnimation.begin().thenLoop(\"animation.nyna.walk\"));\n\t\t\t}\n\t\t\treturn event.setAndContinue(RawAnimation.begin().thenLoop(\"animation.nyna.idle\"));\n\t\t}\n\t\treturn PlayState.STOP;\n\t}\n\n\tprivate PlayState procedurePredicate(AnimationState event) {\n\t\tif (!animationprocedure.equals(\"empty\") && event.getController().getAnimationState() == AnimationController.State.STOPPED) {\n\t\t\tevent.getController().setAnimation(RawAnimation.begin().thenPlay(this.animationprocedure));\n\t\t\tif (event.getController().getAnimationState() == AnimationController.State.STOPPED) {\n\t\t\t\tthis.animationprocedure = \"empty\";\n\t\t\t\tevent.getController().forceAnimationReset();\n\t\t\t}\n\t\t} else if (animationprocedure.equals(\"empty\")) {\n\t\t\treturn PlayState.STOP;\n\t\t}\n\t\treturn PlayState.CONTINUE;\n\t}\n\n\t@Override\n\tprotected void tickDeath() {\n\t\t++this.deathTime;\n\t\tif (this.deathTime == 20) {\n\t\t\tthis.remove(RemovalReason.KILLED);\n\t\t\tthis.dropExperience();\n\t\t}\n\t}\n\n\tpublic String getSyncedAnimation() {\n\t\treturn this.entityData.get(ANIMATION);\n\t}\n\n\tpublic void setAnimation(String animation) {\n\t\tthis.entityData.set(ANIMATION, animation);\n\t}\n\n\t@Override\n\tpublic void registerControllers(AnimatableManager.ControllerRegistrar data) {\n\t\tdata.add(new AnimationController<>(this, \"movement\", 4, this::movementPredicate));\n\t\tdata.add(new AnimationController<>(this, \"procedure\", 4, this::procedurePredicate));\n\t}\n\n\t@Override\n\tpublic AnimatableInstanceCache getAnimatableInstanceCache() {\n\t\treturn this.cache;\n\t}\n\n\n\t/* VARIANTS */\n\n\n\tpublic NynaVariant getVariant() {\n\t\treturn NynaVariant.byId(this.getTypeVariant() & 255);\n\t}\n\n\tprivate int getTypeVariant() {\n\t\treturn this.entityData.get(DATA_ID_TYPE_VARIANT);\n\t}\n\n\tprivate void setVariant(NynaVariant variant) {\n\t\tthis.entityData.set(DATA_ID_TYPE_VARIANT, variant.getId() & 255);\n\t}\n\n\tpublic static void setVariant(NynaEntity Nyna, NynaVariant Variant) {\n\t\tNyna.entityData.set(DATA_ID_TYPE_VARIANT, Variant.getId() & 255);\n\t\tNyna.variant = Variant;\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/sennaton/sennaton_additions/SennatonMob/NynaEntity.java b/src/main/java/org/sennaton/sennaton_additions/SennatonMob/NynaEntity.java
--- a/src/main/java/org/sennaton/sennaton_additions/SennatonMob/NynaEntity.java	(revision 350f1eaaa161a43534772e2a3111472a243c9811)
+++ b/src/main/java/org/sennaton/sennaton_additions/SennatonMob/NynaEntity.java	(date 1718972988871)
@@ -148,7 +148,7 @@
 	}
 
 	private boolean fireytype() {
-		if (this.fireImmune()||variant == NynaVariant.FIREY_NYNA || variant == NynaVariant.HAUNTED_NYNA){
+		if (this.fireImmune() || variant == NynaVariant.FIREY_NYNA || variant == NynaVariant.HAUNTED_NYNA){
 			return true;
 		} else
 			return  false;
@@ -187,7 +187,7 @@
 			}
 
 		});
-		this.targetSelector.addGoal(3, new HurtByTargetGoal(this).setAlertOthers());
+		this.targetSelector.addGoal(3, new HurtByTargetGoal(this, NynaEntity.class).setAlertOthers());
 		this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Monster.class, true));
 		this.targetSelector.addGoal(4,	new NearestAttackableTargetGoal(this, TropicalFish.class, true, false));
 		this.targetSelector.addGoal(4, new NearestAttackableTargetGoal(this, Cod.class, true, false));
Index: src/main/java/org/sennaton/sennaton_additions/Sennaton_Additions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.sennaton.sennaton_additions;\n\nimport com.mojang.logging.LogUtils;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.renderer.entity.EntityRenderers;\nimport net.minecraft.core.registries.Registries;\nimport net.minecraft.world.entity.Mob;\nimport net.minecraft.world.entity.SpawnPlacements;\nimport net.minecraft.world.entity.animal.Animal;\nimport net.minecraft.world.item.CreativeModeTab;\nimport net.minecraft.world.item.CreativeModeTabs;\nimport net.minecraft.world.item.Item;\nimport net.minecraft.world.level.block.Block;\nimport net.minecraft.world.level.block.Blocks;\nimport net.minecraft.world.level.levelgen.Heightmap;\nimport net.minecraftforge.api.distmarker.Dist;\nimport net.minecraftforge.common.MinecraftForge;\nimport net.minecraftforge.event.BuildCreativeModeTabContentsEvent;\nimport net.minecraftforge.event.server.ServerStartingEvent;\nimport net.minecraftforge.eventbus.api.IEventBus;\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\nimport net.minecraftforge.fml.ModLoadingContext;\nimport net.minecraftforge.fml.common.Mod;\nimport net.minecraftforge.fml.config.ModConfig;\nimport net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;\nimport net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;\nimport net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\nimport net.minecraftforge.registries.DeferredRegister;\nimport net.minecraftforge.registries.ForgeRegistries;\nimport org.sennaton.sennaton_additions.SennatonBlocks.SennatonBlocks;\nimport org.sennaton.sennaton_additions.SennatonItems.SennatonItems;\nimport org.sennaton.sennaton_additions.SennatonMob.MobInit;\nimport org.sennaton.sennaton_additions.SennatonMob.NynaEntity;\nimport org.sennaton.sennaton_additions.SennatonMob.Spawns.NynaSpawnCondition;\nimport org.sennaton.sennaton_additions.client.renderer.dice.DiceRenderer;\nimport org.sennaton.sennaton_additions.client.renderer.dice.FrozenDiceRenderer;\nimport org.sennaton.sennaton_additions.client.renderer.dice.WarpedDiceRenderer;\nimport org.sennaton.sennaton_additions.client.renderer.dice.BurningDiceRenderer;\nimport org.sennaton.sennaton_additions.client.renderer.dice.HauntedDiceRenderer;\nimport org.sennaton.sennaton_additions.client.renderer.NynaRenderer;\nimport org.slf4j.Logger;\n\n// The value here should match an entry in the META-INF/mods.toml file\n@Mod(Sennaton_Additions.MODID)\npublic class Sennaton_Additions {\n\n    // Define mod id in a common place for everything to reference\n    public static final String MODID = \"sennaton_additions\";\n    // Directly reference a slf4j logger\n    public static final Logger LOGGER = LogUtils.getLogger();\n    // Create a Deferred Register to hold Blocks which will all be registered under the \"sennaton_additions\" namespace\n    public static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MODID);\n    // Create a Deferred Register to hold Items which will all be registered under the \"sennaton_additions\" namespace\n    public static final DeferredRegister<Item> ITEMS = DeferredRegister.create(ForgeRegistries.ITEMS, MODID);\n    // Create a Deferred Register to hold CreativeModeTabs which will all be registered under the \"examplemod\" namespace\n    public static final DeferredRegister<CreativeModeTab> CREATIVE_MODE_TABS = DeferredRegister.create(Registries.CREATIVE_MODE_TAB, MODID);\n\n\n    public Sennaton_Additions() {\n        IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();\n\n        SennatonItems.register(modEventBus);\n        SennatonBlocks.register(modEventBus);\n        MobInit.REGISTRY.register(modEventBus);\n       // SpawnPlacements.register(MobInit.NYNA.get(),\n         //       SpawnPlacements.Type.ON_GROUND, Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, Animal::checkAnimalSpawnRules);\n\n\n\n        // Register the commonSetup method for modloading\n        modEventBus.addListener(this::commonSetup);\n\n        // Register the Deferred Register to the mod event bus so blocks get registered\n        BLOCKS.register(modEventBus);\n        // Register the Deferred Register to the mod event bus so items get registered\n        ITEMS.register(modEventBus);\n        // Register the Deferred Register to the mod event bus so tabs get registered\n        CREATIVE_MODE_TABS.register(modEventBus);\n\n        // Register ourselves for server and other game events we are interested in\n        MinecraftForge.EVENT_BUS.register(this);\n\n        // Register the item to a creative tab\n        modEventBus.addListener(this::addCreative);\n\n        // Register our mod's ForgeConfigSpec so that Forge can create and load the config file for us\n        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Config.SPEC);\n    }\n\n    private void commonSetup(final FMLCommonSetupEvent event) {\n        // Some common setup code\n        LOGGER.info(\"HELLO FROM COMMON SETUP\");\n        LOGGER.info(\"DIRT BLOCK >> {}\", ForgeRegistries.BLOCKS.getKey(Blocks.DIRT));\n\n        if (Config.logDirtBlock)\n            LOGGER.info(\"DIRT BLOCK >> {}\", ForgeRegistries.BLOCKS.getKey(Blocks.DIRT));\n\n        LOGGER.info(Config.magicNumberIntroduction + Config.magicNumber);\n\n        Config.items.forEach((item) -> LOGGER.info(\"ITEM >> {}\", item.toString()));\n\n        SpawnPlacements.register(MobInit.NYNA.get(), SpawnPlacements.Type.ON_GROUND, Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, (entityType, world, reason, pos, random) -> {\n            int x = pos.getX();\n            int y = pos.getY();\n            int z = pos.getZ();\n            return true;\n        });\n\n    }\n\n    // Add the example block item to the building blocks tab\n    private void addCreative(BuildCreativeModeTabContentsEvent event)\n    {\n        if (event.getTabKey() == CreativeModeTabs.COMBAT) {\n            event.accept(SennatonItems.CRYSTAL_EDGE);\n        }\n        if (event.getTabKey() == CreativeModeTabs.TOOLS_AND_UTILITIES) {\n            event.accept(SennatonItems.WRAPPED_COAL);\n        }\n        if (event.getTabKey() == CreativeModeTabs.INGREDIENTS) {\n            event.accept(SennatonItems.SHARPENED_CRYSTAL);\n            event.accept(SennatonItems.HARDENED_DIAMOND);\n        }\n    }\n    // You can use SubscribeEvent and let the Event Bus discover methods to call\n    @SubscribeEvent\n    public void onServerStarting(ServerStartingEvent event) {\n        // Do something when the server starts\n        LOGGER.info(\"HELLO from server starting\");\n    }\n\n    // You can use EventBusSubscriber to automatically register all static methods in the class annotated with @SubscribeEvent\n    @Mod.EventBusSubscriber(modid = MODID, bus = Mod.EventBusSubscriber.Bus.MOD, value = Dist.CLIENT)\n    public static class ClientModEvents {\n\n        @SubscribeEvent\n        public static void onClientSetup(FMLClientSetupEvent event)\n        {\n            EntityRenderers.register(MobInit.NYNA.get(), NynaRenderer::new);\n            EntityRenderers.register(MobInit.DICE.get(), DiceRenderer::new);\n            EntityRenderers.register(MobInit.FROZEN_DICE.get(), FrozenDiceRenderer::new);\n            EntityRenderers.register(MobInit.WARPED_DICE.get(), WarpedDiceRenderer::new);\n            EntityRenderers.register(MobInit.BURNING_DICE.get(), BurningDiceRenderer::new);\n            EntityRenderers.register(MobInit.HAUNTED_DICE.get(), HauntedDiceRenderer::new);\n\n            // Some client setup code\n            LOGGER.info(\"HELLO FROM CLIENT SETUP\");\n            LOGGER.info(\"MINECRAFT NAME >> {}\", Minecraft.getInstance().getUser().getName());\n        }\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/sennaton/sennaton_additions/Sennaton_Additions.java b/src/main/java/org/sennaton/sennaton_additions/Sennaton_Additions.java
--- a/src/main/java/org/sennaton/sennaton_additions/Sennaton_Additions.java	(revision 350f1eaaa161a43534772e2a3111472a243c9811)
+++ b/src/main/java/org/sennaton/sennaton_additions/Sennaton_Additions.java	(date 1718971949104)
@@ -31,7 +31,7 @@
 import org.sennaton.sennaton_additions.SennatonItems.SennatonItems;
 import org.sennaton.sennaton_additions.SennatonMob.MobInit;
 import org.sennaton.sennaton_additions.SennatonMob.NynaEntity;
-import org.sennaton.sennaton_additions.SennatonMob.Spawns.NynaSpawnCondition;
+import org.sennaton.sennaton_additions.SennatonMob.Spawns.NynaSpawnConditions;
 import org.sennaton.sennaton_additions.client.renderer.dice.DiceRenderer;
 import org.sennaton.sennaton_additions.client.renderer.dice.FrozenDiceRenderer;
 import org.sennaton.sennaton_additions.client.renderer.dice.WarpedDiceRenderer;
@@ -103,7 +103,7 @@
             int x = pos.getX();
             int y = pos.getY();
             int z = pos.getZ();
-            return true;
+            return NynaSpawnConditions.ShouldSpawn(world, x, y, z);
         });
 
     }
